<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kentaro Imai</title>
  <link href="http://kentaroimai.com/feed.xml" rel="self"/>
  <link href="http://kentaroimai.com/"/>
  <updated>2023-06-13T16:00:00Z</updated>
  <id>http://kentaroimai.com/</id>
  <author>
    <name>Kentaro Imai</name>
    <email>kentaroi@gmail.com</email>
  </author>
  
  <entry>
    <title>新しいプロジェクト</title>
    <link href="http://kentaroimai.com/2023/02/%E6%96%B0%E3%81%97%E3%81%84%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88/"/>
    <updated>2023-02-27T17:00:00Z</updated>
    <id>http://kentaroimai.com/2023/02/%E6%96%B0%E3%81%97%E3%81%84%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88/</id>
    <content type="html">&lt;p&gt;ここ数年まともなアウトプットができていない。んだけど、今日はそれについて書くのはやめておく。&lt;/p&gt;
&lt;p&gt;これからのことを書く。&lt;/p&gt;
&lt;p&gt;新しいアプリを作ろうと思っている。何を作るのか迷ったが、ノートアプリを作ろうと思う。&lt;/p&gt;
&lt;p&gt;なぜノートアプリみたいなものを作るのか？その辺のことを書き始めると長くなりそうなので、これについても今日はやめておく。とにかく僕なりにいろいろと考えた末にそういうことになった。&lt;/p&gt;
&lt;p&gt;ただ、ひとつだけ書いておくと、既存のノートアプリのクローンを作るつもりはないし、似たようなものも作るつもりはない。僕自身がしっくりくるノートアプリを見つけられないので、自作する、そういう話だ。&lt;/p&gt;
&lt;p&gt;どんなノートアプリを作ろうと考えているのかは追々書いていきたい。&lt;/p&gt;
&lt;p&gt;で、僕としてはノートアプリはスマホからもPCからも使いたい。マルチプラットフォーム対応していてほしい。だから、そうするつもりでいる。ただ、まずはiPhone版とAndroid版を先に開発するつもりでいる。&lt;/p&gt;
&lt;p&gt;何を使って作るか迷ったが、Flutterを使おうと思っている。今まで使ったことはないし、Dartも年が明けてから勉強を始めたばかりだが、何とかなるような気がしている。なかなか使いやすそうな言語だと（今のところは）感じている。&lt;/p&gt;
&lt;p&gt;実は、去年まで数年間ネイティブでアプリを書くことしか考えていなかった。Kotlinはあまりさわっていないが、Swiftのコードは書いていた。が、結局ろくなアウトプットをしないまま、Swiftをほぼ書かなくなりそうだ。&lt;/p&gt;
&lt;p&gt;いろいろと技術的に足りていないことがあるけれど、勉強しながら作ろうと思う。&lt;/p&gt;
&lt;p&gt;これから開発日記のようなものを書くつもりでいる。読みたいと思う人がいるのかはわからないけれど。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>DartとFlutterを学ぶための技術書について</title>
    <link href="http://kentaroimai.com/2023/03/Dart%E3%81%A8Flutter%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"/>
    <updated>2023-03-01T09:30:00Z</updated>
    <id>http://kentaroimai.com/2023/03/Dart%E3%81%A8Flutter%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://kentaroimai.com/2023/02/new-project/&quot; class=&quot;main__link&quot;&gt;ノートアプリを開発することに決めた&lt;/a&gt;が、まだ開発を始めることができていない。&lt;/p&gt;
&lt;p&gt;というのも、アプリを開発するのに使う予定のFlutterを勉強中だからで、これがiOSだけのアプリで良いのなら既にSwiftで書き始めているところだが、今回はそういう訳にはいかない。マルチプラットフォームでアプリを出すためには、そしてそれを個人で短期間でやるとなればFlutterをどうしても使いたいのだ。&lt;/p&gt;
&lt;p&gt;ところで僕は、プログラミング関係であるか否かを問わず、何でも本で勉強するのが好きで、いつも（電子ブックではなく）紙の書籍を買ってマーカーを引きながら、たまにメモを書き込みながら読んで勉強している。今回もそのつもりでDartやFlutterの本を買い集めたのだが、正直あまりうまくいっていない。&lt;/p&gt;
&lt;p&gt;というのも、FlutterもDartもまだ若く変化が激しいからで、まともに本が出版されていないし、されていてもほとんどの本が既に陳腐化してしまっており内容が現在のFlutterやDartに当てはまらなくなってしまっているのだ。&lt;/p&gt;
&lt;p&gt;なので今日のブログは要は泣き言である。2回目にして泣き言とは情けない。&lt;/p&gt;
&lt;p&gt;以下の内容は端的に言えば「つらい」ということで、読む価値はありません。ここまで読んでくださってありがとうございました。FlutterやDartの本を探している人は読むと少しは参考になることもあるかもしれません。&lt;/p&gt;
&lt;h3&gt;さらに勉強を進めた結果、特にFlutterの本に関して下記の評価を改めなければならないと感じつつある。もう少しFlutterについて理解を深めた後に改めて記事を書き直したいが、基本的には&lt;em&gt;Flutter Apprentice&lt;/em&gt;をおすすめしたい。(2023年3月4日）&lt;/h3&gt;
&lt;h3&gt;書いた（2023年3月30日）→ &lt;a href=&quot;http://kentaroimai.com/2023/03/Dart%E3%81%A8Flutter%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%EF%BC%92/&quot; class=&quot;main__link&quot;&gt;DartとFlutterを学ぶための技術書について２&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;購入した書籍&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;http://kentaroimai.com/2023/03/Dart%E3%81%A8Flutter%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/g3r1gVp&quot; class=&quot;main__link&quot;&gt;Jonathan Sande, &lt;em&gt;Dart Apprentice: Fundamentals&lt;/em&gt;, (Kodeco Inc., 2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/h0XmfPW&quot; class=&quot;main__link&quot;&gt;Jonathan Sande, &lt;em&gt;Dart Apprentice: Beyond the Basics&lt;/em&gt;, (Kodeco Inc., 2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/dEqa9SV&quot; class=&quot;main__link&quot;&gt;Chris Buckett, &lt;em&gt;Dart in Action&lt;/em&gt; (Manning Publications Co., 2013)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/dBNcqpW&quot; class=&quot;main__link&quot;&gt;Michael Katz, Kevin David Moore &amp;amp; Vincent Ngo, &lt;em&gt;Flutter Apprentice&lt;/em&gt; (Razeware LLC., 2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/3yqsQE7&quot; class=&quot;main__link&quot;&gt;Eric Windmill, &lt;em&gt;Flutter in Action&lt;/em&gt; (Manning Publications Co., 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1~3まではDartの本で、4と5はFlutterの本である。また、1,2,4は&lt;a href=&quot;https://www.kodeco.com/&quot; class=&quot;main__link&quot;&gt;Kodeco&lt;/a&gt;（旧raywenderlich）という有料のチュートリアル記事をたくさん出しているサイトの本で、3と5は&lt;a href=&quot;https://www.manning.com/&quot; class=&quot;main__link&quot;&gt;Manning&lt;/a&gt;というおそらく最も信頼のおける技術書の出版社のひとつによるものである。&lt;/p&gt;
&lt;p&gt;既に1と2の本を読み終えたが、プログラミング初心者向けとしてなら、これらの本は悪くない。説明も適切であり、読んでいて僕が疑問に思ったことはたいていその後に説明があるなど、解説に気配りが感じられ好感が持てた。ただ、残念ながら、すでに他言語で経験のあるプログラマにとって説明は冗長であり、内容も深くない。中身が価格に見合っていない。ともあれ、最新のDartに追従した解説書は貴重であり、そういう意味ではこれぐらいしか選べる本がないとも言える。&lt;/p&gt;
&lt;p&gt;3はManningの本だが、やはり古すぎた。買う意味はないと思う。&lt;/p&gt;
&lt;p&gt;4は上に述べたようにKodecoのFlutter解説本で、チュートリアル形式で進むが、指示が多く解説は少ない。これは必ずしも悪い訳ではない。スマホアプリを開発したことのない人にとっては手を動かして感覚を掴むことこそが最も大事なことのひとつだからだ。ただ、僕は途中で我慢ができなくなり、読むのを止め、現在、5のFlutter in Action (Manning)を読み進めているところである。&lt;/p&gt;
&lt;p&gt;5の本はさすがManningというべきか、解説は非常に良い。しかし、やはり古い。サンプルコードをGitHubのリポジトリから落としたが、Android StudioでGradleのSyncができずに詰まってしまい、詳しくない僕はSyncを諦め、別のディレクトリで&lt;code class=&quot;main__inline-code&quot;&gt;flutter create&lt;/code&gt;してから、サンプルコードの&lt;code class=&quot;main__inline-code&quot;&gt;lib&lt;/code&gt;ディレクトリと&lt;code class=&quot;main__inline-code&quot;&gt;assets&lt;/code&gt;ディレクトリをコピーし、&lt;code class=&quot;main__inline-code&quot;&gt;pubspec.yaml&lt;/code&gt;を修正することにした。これはうまくいったのだが、サンプルコードがDartにnull安全が入る以前のものであるため、全面的にコードを見直し、修正する必要があった。また&lt;code class=&quot;main__inline-code&quot;&gt;RaisedButton&lt;/code&gt;を&lt;code class=&quot;main__inline-code&quot;&gt;ElevatedButton&lt;/code&gt;に、&lt;code class=&quot;main__inline-code&quot;&gt;FlatButton&lt;/code&gt;を&lt;code class=&quot;main__inline-code&quot;&gt;TextButton&lt;/code&gt;に置き換えるなどの修正も必要だった。この修正の過程自体は勉強にもなって悪くない経験だったが、ここまでサンプルコードに修正が必要だと他人に薦めづらいと感じた。ただ、SwiftやKotlinなどのnull安全の概念が入った言語を使ったことがあるのなら、サンプルコードの修正はそれほど難しくないと思う。&lt;/p&gt;
&lt;p&gt;まだFlutterの全体を把握しきれていない今の時点での感想だが、&lt;/p&gt;
&lt;p&gt;Kodecoの本は３冊とも、プログラミング初心者を対象としているかのような丁寧さで、おそらくプログラムを一度も組んだことのない人がいっちょFlutterで一発当ててやるかと思った際には、一番フィットする本だと思う。&lt;/p&gt;
&lt;p&gt;Kodecoの本の内容は大雑把に言えば、&lt;a href=&quot;https://bignerdranch.com/books/&quot; class=&quot;main__link&quot;&gt;Big Nerd RanchのiOSアプリやAndroidアプリ開発の本&lt;/a&gt;に似ている。Big Nerd Ranchの本が好きなら、（価格は高く、クオリティもBNRの本に比べると見劣りしてしまう気がするが、）もしかすると気に入るかもしれない。&lt;/p&gt;
&lt;p&gt;サンプルコードの修正の手間を分かった上でなら、5のFlutter in Action (Manning, 2020年1月出版)を買っても良いかもしれない。
だが、一般的には、FlutterやDartの本はnull安全が入った2020年夏以降のものを選ぶのが無難だと思う。&lt;/p&gt;
&lt;p&gt;実は昨年末にO&#39;Reillyから&lt;a href=&quot;https://amzn.asia/d/4k7CT7g&quot; class=&quot;main__link&quot;&gt;Flutter &amp;amp; Dart Cookbook&lt;/a&gt;という本が出ている。Cookbookだからまぁいいかと買わなかったが、もしかするとこの本を買うのが正解だったのかもしれない……とちょっと後悔をしている。&lt;/p&gt;
&lt;p&gt;ただ、もう本はいい。&lt;/p&gt;
&lt;p&gt;数万円を溶かして得たやや心許ない知識を元に、その都度必要な知識を吸収しつつアプリ開発を進めていこうと思う。&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Amazonへのリンクにしたが、これは今のところAmazonにレビューが一番集まっていることが多いからで、洋書を買うのに必ずしもAmazonをおすすめしない。ただし、Kodecoの本に関してはAmazonによるオンデマンド印刷なので、Amazonで買うのが一番きれいに届くと思う。 &lt;a href=&quot;http://kentaroimai.com/2023/03/Dart%E3%81%A8Flutter%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  
  <entry>
    <title>DartとFlutterを学ぶための技術書について２</title>
    <link href="http://kentaroimai.com/2023/03/Dart%E3%81%A8Flutter%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%EF%BC%92/"/>
    <updated>2023-03-30T14:00:00Z</updated>
    <id>http://kentaroimai.com/2023/03/Dart%E3%81%A8Flutter%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%EF%BC%92/</id>
    <content type="html">&lt;p&gt;１ヶ月ブログを休んでしまった。&lt;/p&gt;
&lt;p&gt;何か意味のあることを書こうとした結果、書けなくなった。書いているうちに「これを書いて意味があるのか？」とか考え出すともうだめである。&lt;/p&gt;
&lt;p&gt;だから、これからは意味のあることを書かないことにした。&lt;/p&gt;
&lt;p&gt;前回、DartとFlutterの技術書を列挙したが、読んでみた結果、以下の３冊が良かった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/g3r1gVp&quot; class=&quot;main__link&quot;&gt;Jonathan Sande, &lt;em&gt;Dart Apprentice: Fundamentals&lt;/em&gt;, (Kodeco Inc., 2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/h0XmfPW&quot; class=&quot;main__link&quot;&gt;Jonathan Sande, &lt;em&gt;Dart Apprentice: Beyond the Basics&lt;/em&gt;, (Kodeco Inc., 2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://amzn.asia/d/dBNcqpW&quot; class=&quot;main__link&quot;&gt;Michael Katz, Kevin David Moore &amp;amp; Vincent Ngo, &lt;em&gt;Flutter Apprentice&lt;/em&gt; (Razeware LLC., 2022)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flutter Apprenticeは、最後のプラットフォーム別の部分はまだ読んでいないが、だいたい良かった。&lt;/p&gt;
&lt;p&gt;ただ、問題は、画面遷移には&lt;code class=&quot;main__inline-code&quot;&gt;go_router&lt;/code&gt;、状態管理には&lt;code class=&quot;main__inline-code&quot;&gt;provider&lt;/code&gt;、DBライブラリは&lt;code class=&quot;main__inline-code&quot;&gt;moor&lt;/code&gt;を使っている点で、&lt;code class=&quot;main__inline-code&quot;&gt;go_router&lt;/code&gt;はFlutterに取り込まれたパッケージなのでこれを使っているのは自然なのだが、単純な画面遷移は問題なくても、ネストした複雑なものを作ろうとするとまだ機能が足りていないというようなことをRedditで読んだので、実際の開発に使っていいものか迷っている。ノートアプリの開発には&lt;code class=&quot;main__inline-code&quot;&gt;Beamer&lt;/code&gt;か&lt;code class=&quot;main__inline-code&quot;&gt;AutoRoute&lt;/code&gt;を選ぶかもしれない。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;main__inline-code&quot;&gt;provider&lt;/code&gt;は&lt;code class=&quot;main__inline-code&quot;&gt;Riverpod&lt;/code&gt;という改善されたものが出ているので、そっちを使いたい。他にも多数状態管理のためのライブラリがあるらしく悩ましいが、とりあえず&lt;code class=&quot;main__inline-code&quot;&gt;Riverpod&lt;/code&gt;を使ってみようと思う。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;main__inline-code&quot;&gt;moor&lt;/code&gt;はAndroidアプリ開発に使う&lt;code class=&quot;main__inline-code&quot;&gt;Room&lt;/code&gt;のFlutter版という位置付けらしく、&lt;code class=&quot;main__inline-code&quot;&gt;Room&lt;/code&gt;を逆さにして&lt;code class=&quot;main__inline-code&quot;&gt;moor&lt;/code&gt;らしい。あと、すでにパッケージ名が変わっていて、今は後継版の&lt;code class=&quot;main__inline-code&quot;&gt;drift&lt;/code&gt;を使うことが推奨されている。&lt;/p&gt;
&lt;p&gt;そういう訳で、アプリ開発で骨組みとなるようなところの解説が、微妙に古いライブラリや使わなさそうなライブラリをベースに行われていて、おまけにそれぞれの解説も非常に薄いというか、さらっと書かれてるので、この本をもってFlutterをマスターとは到底言えないというのが、読んでみての正直な感想である。ただまぁ、Flutterのようなまだまだ変更の多いフレームワークの解説書が存在するだけでありがたい訳だし、とりあえずお手本に従ってアプリを組んで感覚をつかむという点では非常に良い本だったと思う。&lt;/p&gt;
&lt;p&gt;本を読んだ後何をしていたかということはまた別の記事で。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>部屋を片付けた話</title>
    <link href="http://kentaroimai.com/2023/04/%E9%83%A8%E5%B1%8B%E3%82%92%E7%89%87%E4%BB%98%E3%81%91%E3%81%9F%E8%A9%B1/"/>
    <updated>2023-04-01T06:00:00Z</updated>
    <id>http://kentaroimai.com/2023/04/%E9%83%A8%E5%B1%8B%E3%82%92%E7%89%87%E4%BB%98%E3%81%91%E3%81%9F%E8%A9%B1/</id>
    <content type="html">&lt;p&gt;先月、Flutterの本を読んだ後、部屋を片付けた。&lt;/p&gt;
&lt;p&gt;僕はやっぱり生活が苦手な気がする。&lt;/p&gt;
&lt;p&gt;大学生だった頃に薄々気付いてはいたのだが、おっさんとなった今も何にも変わっていない。&lt;/p&gt;
&lt;p&gt;片付けは苦手だし、そもそもきっちりと間違いなく何かをすることが苦手である。書き間違えずに文字を紙に書くことが苦手だし、数を数えることも苦手だ。出掛ける前に何度も忘れ物に気づいて行ったり来たりするし、出掛けてもしばしば戻って鍵が閉まっているか確認するし、結局忘れ物があったりする。日常生活のほとんどが苦手な気がしている。&lt;/p&gt;
&lt;p&gt;本やPCに囲まれて過ごすのが好きな僕は、断捨離やミニマリストが話題になった頃、全く自分に関係ないものと思っていたし、正直なところ今も断捨離という言葉は好きな言葉ではない（僕は物欲肯定派である）が、今回片付けをしているうちに、少しそういうものから学ぶべきなのかもしれないと初めて思った。&lt;/p&gt;
&lt;p&gt;自分の大切に思っていることに物もお金も時間も最大限投入するために、その他をできるだけ切り捨てるのだ。生活というものを極限まで自分から取り除くと、生活が苦手であるということの悪影響を最小限に抑えられるかもしれない。&lt;/p&gt;
&lt;p&gt;そんなことが頭に浮かんだりした。&lt;/p&gt;
&lt;p&gt;でもとりあえずは何もしない。部屋は片付いたのだ。苦手な生活のことは当分考えたくない。&lt;/p&gt;
&lt;p&gt;それに、部屋は片付いたがアプリは全くできていない。&lt;/p&gt;
&lt;p&gt;今月からはアプリ開発に集中したい。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ノートアプリのおおまかな設計段階ですでに悩んでいる</title>
    <link href="http://kentaroimai.com/2023/04/%E3%83%8E%E3%83%BC%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%81%8A%E3%81%8A%E3%81%BE%E3%81%8B%E3%81%AA%E8%A8%AD%E8%A8%88%E6%AE%B5%E9%9A%8E%E3%81%A7%E3%81%99%E3%81%A7%E3%81%AB%E6%82%A9%E3%82%93%E3%81%A7%E3%81%84%E3%82%8B/"/>
    <updated>2023-04-21T15:45:00Z</updated>
    <id>http://kentaroimai.com/2023/04/%E3%83%8E%E3%83%BC%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%81%8A%E3%81%8A%E3%81%BE%E3%81%8B%E3%81%AA%E8%A8%AD%E8%A8%88%E6%AE%B5%E9%9A%8E%E3%81%A7%E3%81%99%E3%81%A7%E3%81%AB%E6%82%A9%E3%82%93%E3%81%A7%E3%81%84%E3%82%8B/</id>
    <content type="html">&lt;p&gt;先月部屋を片付けた後、&lt;code class=&quot;main__inline-code&quot;&gt;Riverpod&lt;/code&gt;をさらっと勉強したりしたが、取り立てて面白い話もない。&lt;/p&gt;
&lt;p&gt;その後、サーバサイドの勉強をしていた。&lt;/p&gt;
&lt;p&gt;作ろうとしているアプリはノートアプリなのでクライアントだけで完結するアプリにしても良いのだが、マルチデバイス対応をするつもりなのでやはりサーバベースで作りたい。この辺りは意見が分かれるところなのかもしれないが……。&lt;/p&gt;
&lt;p&gt;もしかすると例えば&lt;code class=&quot;main__inline-code&quot;&gt;Realm&lt;/code&gt;などを使って作るのが正解なのかもしれないが、&lt;code class=&quot;main__inline-code&quot;&gt;Realm&lt;/code&gt;のことはよく分かっていないし、こういうコア部分をプロプライエタリなもので賄うのは怖い。&lt;/p&gt;
&lt;p&gt;そういう訳で、サーバサイドを書かねばならない。&lt;/p&gt;
&lt;p&gt;問題は、僕がサーバサイドのコードを書いていたのはもう10年以上前ってことで、さすがに勉強をしなおさないといけないだろう。&lt;/p&gt;
&lt;p&gt;そこで、当時は&lt;code class=&quot;main__inline-code&quot;&gt;Ruby on Rails&lt;/code&gt;をさわっていたが、もう随分前のことでもあるし、まっさらな気持ちでサーバサイドの技術を選ぶことにした。&lt;/p&gt;
&lt;p&gt;とは言っても中々難しい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MVCやその亜種をベースにしたサーバサイドのフレームワークがいろんな言語で出ているが、その中から選ぶなら以前使っていた&lt;code class=&quot;main__inline-code&quot;&gt;Rails&lt;/code&gt;を選ぶのが一番楽な気がする。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最近は&lt;code class=&quot;main__inline-code&quot;&gt;JavaScript&lt;/code&gt;をちょっと書いていたので、そういう意味では&lt;code class=&quot;main__inline-code&quot;&gt;JavaScript&lt;/code&gt;/&lt;code class=&quot;main__inline-code&quot;&gt;TypeScript&lt;/code&gt;のサーバサイドフレームワークのいずれかを使うのも良いかもしれない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一方で、実は僕には将来作りたいサービスがあって、それには&lt;code class=&quot;main__inline-code&quot;&gt;Elixir&lt;/code&gt;と&lt;code class=&quot;main__inline-code&quot;&gt;Phoenix&lt;/code&gt;がフィットする気がしていて、そこに繋げる意味では&lt;code class=&quot;main__inline-code&quot;&gt;Elixir&lt;/code&gt;と&lt;code class=&quot;main__inline-code&quot;&gt;Phoenix&lt;/code&gt;で作りたい。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で、とりあえず、やって損はないだろうということで、&lt;code class=&quot;main__inline-code&quot;&gt;Elixir&lt;/code&gt;の勉強をしていたのが最近の話だ。&lt;/p&gt;
&lt;p&gt;ただ、今悩んでいることは、ノートの整合性保持で、ここの部分の設計をどうすべきなのか、決めきれないでいる。&lt;/p&gt;
&lt;p&gt;例えばウェブアプリであれば、ユーザはおそらくオンラインだし、オフライン編集ができなくてもユーザは納得してくれるだろう。オンラインであれば、おひとり様用ウェブアプリの場合、編集後即サーバに&lt;code class=&quot;main__inline-code&quot;&gt;POST&lt;/code&gt;/&lt;code class=&quot;main__inline-code&quot;&gt;PUT&lt;/code&gt;/&lt;code class=&quot;main__inline-code&quot;&gt;PATCH&lt;/code&gt;/&lt;code class=&quot;main__inline-code&quot;&gt;DELETE&lt;/code&gt;すれば整合性の問題はほぼ起こらないだろう。&lt;/p&gt;
&lt;p&gt;逆に、スマホアプリの場合、ユーザはオフラインでノート編集できることを期待する。ということは何らかのデータの競合解消ロジックが必要になる。&lt;/p&gt;
&lt;p&gt;複数人で編集する場合はもちろん整合性の問題が起きるが、そうでなくても、ひとりが複数のデバイスから編集する場合、コンフリクトが起こる可能性は高い。&lt;/p&gt;
&lt;p&gt;この整合性問題を解決するための技術が&lt;code class=&quot;main__inline-code&quot;&gt;OT&lt;/code&gt;(Operational Transformation：操作変換)とか&lt;code class=&quot;main__inline-code&quot;&gt;CRDT&lt;/code&gt;(Conflict-free Replicated Data Type)とか呼ばれるもので、この辺の知識が全く足りていない。&lt;/p&gt;
&lt;p&gt;この辺の実装は&lt;code class=&quot;main__inline-code&quot;&gt;JavaScript&lt;/code&gt;で書かれているものが多い気がするので、もしかするとサーバサイドはそういうライブラリを利用して&lt;code class=&quot;main__inline-code&quot;&gt;JavaScript&lt;/code&gt;で書くべきなのかもしれない（折角&lt;code class=&quot;main__inline-code&quot;&gt;Elixir&lt;/code&gt;の勉強をしていたところではあるが）。&lt;/p&gt;
&lt;p&gt;ということで、サーバサイドを何で書くかということすら未だ確定できていないのである。&lt;/p&gt;
&lt;p&gt;とりあえず、泥縄ではあるが、今から&lt;code class=&quot;main__inline-code&quot;&gt;OT&lt;/code&gt;や&lt;code class=&quot;main__inline-code&quot;&gt;CRDT&lt;/code&gt;の勉強をしようと思う。ただ、例えば&lt;code class=&quot;main__inline-code&quot;&gt;CRDT&lt;/code&gt;と言ってもいろんなやり方が提案されているらしいので、それらの中から自分のアプリに合ったものを選ぶ必要がある。&lt;/p&gt;
&lt;p&gt;もし詳しい人がいたら、何らか情報をもらえると嬉しいです。&lt;/p&gt;
&lt;p&gt;あと、あんまり大変なようなら、とりあえずは個人使用を想定したノートアプリなのだから、競合解消ロジックなしで一旦リリースしてから考えるということも考えてはいる。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>誰のために書くのかがあやふやだったので決めた</title>
    <link href="http://kentaroimai.com/2023/05/%E8%AA%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E6%9B%B8%E3%81%8F%E3%81%AE%E3%81%8B%E3%81%8C%E3%81%82%E3%82%84%E3%81%B5%E3%82%84%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E6%B1%BA%E3%82%81%E3%81%9F/"/>
    <updated>2023-05-13T19:00:00Z</updated>
    <id>http://kentaroimai.com/2023/05/%E8%AA%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E6%9B%B8%E3%81%8F%E3%81%AE%E3%81%8B%E3%81%8C%E3%81%82%E3%82%84%E3%81%B5%E3%82%84%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E6%B1%BA%E3%82%81%E3%81%9F/</id>
    <content type="html">&lt;p&gt;このブログは始まったばかりだけど、およそ一月に１、２記事程度しか書けていない。これは望ましい頻度でもないし、もっと記事を書けたらなと思いつつも、僕自身は正直上出来だと感じている。&lt;/p&gt;
&lt;p&gt;それは小学生の頃、日記を文字通り３日以内に止めてしまったり、読書感想文が数行しか書けなかった僕にとっては、ブログが続いていること自体が驚くべき進歩と感じられるからだ。&lt;/p&gt;
&lt;p&gt;これまで数記事を書いて、僕にもブログが書けることは書けるということは分かった。これで別に良いのだが、しかし、一歩先に進めてみたいと思った。&lt;/p&gt;
&lt;p&gt;僕の書くものなど所詮何の役にも立たない。そもそも興味を持ってもらえるほどの人間でもないし、文章が上手い訳でもない。しかし、極一部の誰かには多少刺さる、または掠るぐらいのものを書いてみたいという欲があるような気がする。&lt;/p&gt;
&lt;p&gt;そこで、誰のために書くのかということを明確にしようと思う。インターネットの向こうの誰かに向かってババーンとここに宣言するという意味ではなくて、僕自身に対する宣言というか、戒めというか、何かそういうようなものである。&lt;/p&gt;
&lt;p&gt;誰に読まれても良いが、僕としてはそういうつもりで書くということだ。&lt;/p&gt;
&lt;h2&gt;誰のために書くのか&lt;/h2&gt;
&lt;p&gt;このブログは将来、自作のアプリなりサービスなりで何らかのどでかいことを成そうと考えている人を想定して書くことにする。&lt;/p&gt;
&lt;p&gt;ちなみに僕は、自作のアプリなりサービスなりで何らかのどでかいことを成そうと考えている人であるが、未だ成していない人である。&lt;/p&gt;
&lt;p&gt;何事か成してから、当時を振り返って書かれたものも面白いとは思うが、成してない人間が浮かれたりへこたれたり落ち込んだりのたうち回っているものを読む方が僕が好きなので、それを僕も書いてみようという試みである。&lt;/p&gt;
&lt;p&gt;実際のところ、何事もなしていないから、結局それしか書けないんだけど。&lt;/p&gt;
&lt;p&gt;内容に関しては、たぶんプログラミング関連の話題が多くなる気はするが、それに限定するつもりもない。好き勝手にその時々に書きたいことを書くつもりだ。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>現状報告</title>
    <link href="http://kentaroimai.com/2023/06/%E7%8F%BE%E7%8A%B6%E5%A0%B1%E5%91%8A/"/>
    <updated>2023-06-13T16:00:00Z</updated>
    <id>http://kentaroimai.com/2023/06/%E7%8F%BE%E7%8A%B6%E5%A0%B1%E5%91%8A/</id>
    <content type="html">&lt;p&gt;先日、ElixirとPhoenixの勉強をしてみたので、それを元にブログ記事を書いてみたら、なぜか糞みたいな記事ができあがったので、とりあえずお蔵にした。&lt;/p&gt;
&lt;p&gt;ブログ記事を書く能力に欠けているのかも。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kentaroimai.com/2023/05/%E8%AA%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E6%9B%B8%E3%81%8F%E3%81%AE%E3%81%8B%E3%81%8C%E3%81%82%E3%82%84%E3%81%B5%E3%82%84%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E6%B1%BA%E3%82%81%E3%81%9F/&quot; class=&quot;main__link&quot;&gt;前の記事&lt;/a&gt;から１ヶ月経ったこともあるし、とりあえず現状を書いておく。&lt;/p&gt;
&lt;p&gt;まず、なぜブログを書けていないのかというと、毎日毎日、自分の思うほど進捗していないからで、一段落ついた深夜、ブログ書いた方がいいかもって思った時には、もう心身ともに限界な感じで寝てしまっている自分がいるのである。&lt;/p&gt;
&lt;p&gt;で、&lt;a href=&quot;http://kentaroimai.com/2023/02/%E6%96%B0%E3%81%97%E3%81%84%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88/&quot; class=&quot;main__link&quot;&gt;前に書いたけど&lt;/a&gt;、僕はノートアプリを作ろうとしていて、今その技術的なピースを揃えている途中なのである。こんな感じ：&lt;/p&gt;
&lt;h3&gt;フロントエンド&lt;/h3&gt;
&lt;p&gt;Dart + Flutterを予定している。ただし、CRDTの状況によっては他の選択肢も考慮する必要があるかもしれない。&lt;/p&gt;
&lt;h3&gt;バックエンド&lt;/h3&gt;
&lt;p&gt;Elixir + Phoenix予定。ただし、CRDTの状況によっては他の選択肢（JavaScriptで書かれた何らかのウェブフレームワーク）も考慮する必要があるかもしれない。&lt;/p&gt;
&lt;h3&gt;データベース&lt;/h3&gt;
&lt;p&gt;PostgreSQLが良い気がするが、CRDTのためにRedisなどのNoSQLを追加で用意しなければいけないかもしれない。（PostgreSQLもRedis等NoSQLも僕は詳しくない）&lt;/p&gt;
&lt;h3&gt;CRDT&lt;/h3&gt;
&lt;p&gt;オフライン編集のために何らかの手立てを考えなければいけない。&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E5%A4%89%E6%8F%9B&quot; class=&quot;main__link&quot;&gt;OT&lt;/a&gt;よりも最近は&lt;a href=&quot;https://josephg.com/blog/crdts-are-the-future/&quot; class=&quot;main__link&quot;&gt;CRDTが良い&lt;/a&gt;らしく中でもYjsが抜きん出ているらしい、というのが僕の現状認識なのだが、YjsはJavaScriptで書かれているので、ウェブアプリとかElectronアプリならそれでいけるが、スマホアプリを作るとなると中々難しい。&lt;/p&gt;
&lt;p&gt;なので、Yjsを他言語（DartとElixir）で実装するのがこのまま突き進んだ場合の未来、なのだが「それ可能なの？？」と正直若干怖気づいている。&lt;/p&gt;
&lt;h3&gt;デプロイ&lt;/h3&gt;
&lt;p&gt;Kubernetesの勉強を中途半端にしている状態。大丈夫なのか大変心配。&lt;/p&gt;
&lt;p&gt;以上が現状なのだが、&lt;/p&gt;
&lt;p&gt;あんまり技術的なピースが揃っていないことがよく分かる。&lt;/p&gt;
&lt;p&gt;どうしたらいいのか……&lt;/p&gt;
</content>
  </entry>
</feed>
